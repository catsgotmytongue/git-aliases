[alias]
  adog = log --all --decorate --oneline --graph
  aliases = config --get-regexp alias
  assume-c = update-index --no-assume-unchanged
  assume-u = update-index --assume-unchanged
  assumed = "!git ls-files -v | grep ^h | cut -c 3-"
  br = branch
  brv = branch -vv
  branch-name = "rev-parse --abbrev-ref HEAD"
  ci = commit
  co = checkout
  conf = config --show-origin -l
  cpr = "!vsts code pr create --auto-complete -s \"$(git branch-name)\" --open --title "
  cpra = "!vsts code pr create -s \"$(git branch-name)\" --open --title "
  df = diff
  gr = log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --date=relative
  graphviz = "!f() { echo 'digraph git {' ; git log --pretty='format:  %h -> { %p }' \"$@\" | sed 's/[0-9a-f][0-9a-f]*/\"&\"/g' ; echo '}'; }; f"
  hist = log --pretty=format:\"%h %ad | %s%d [%an]\" --graph --date=short
  hist1 = log --pretty=format:\"%h - %an, %ar : %s\"
  hs = log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --date=relative
  h5 = !git hs -5
  h10 = !git hs -10
  hst = log --pretty=format:'%Cblue%h%Creset %s %Cgreen(%an, %ar)' --abbrev-commit
  last = log -1 HEAD
  pf = push --force-with-lease
  pushc = "!git push -u origin \"$(git branch-name)\""
  remaster = !git fetch && git rebase origin/master
  rebasemain = !git fetch && git rebase origin/main
  rc = rebase --continue
  rs = rebase --skip
  ra = rebase --abort
  s = status -b -s
  st = status
  startover = !git reset --hard HEAD && git clean -f -d -x
  testmerge = merge --no-commit --no-ff
  tree = "log --oneline --decorate --all --graph"
  tree = log --all --graph --decorate=short --color --format=format:'%C(bold blue)%h%C(reset) %C(auto)%d%C(reset)\n         %C(black)[%cr]%C(reset)  %x09%C(black)%an: %s %C(reset)'
  unstage = "reset --"
  unstage = reset HEAD
  untrack = branch --unset-upstream
  del-remote-branch="push origin --delete "

  reupdate = !git stash && git rebasemain && git stash pop
  reupnf = !git stash && git rbnf && git stash pop

  # ATTENTION: All aliases prefixed with ! run in /bin/sh make sure you use sh syntax, not bash/zsh or whatever
  recentb = "!r() { refbranch=$1 count=$2; git for-each-ref --sort=-committerdate refs/heads --format='%(refname:short)|%(HEAD)%(color:yellow)%(refname:short)|%(color:bold green)%(committerdate:relative)|%(color:blue)%(subject)|%(color:magenta)%(authorname)%(color:reset)' --color=always --count=${count:-20} | while read line; do branch=$(echo \"$line\" | awk 'BEGIN { FS = \"|\" }; { print $1 }' | tr -d '*'); ahead=$(git rev-list --count \"${refbranch:-master}..${branch}\"); behind=$(git rev-list --count \"${branch}..${refbranch:-master}\"); colorline=$(echo \"$line\" | sed 's/^[^|]*|//'); echo \"$ahead|$behind|$colorline\" | awk -F'|' -vOFS='|' '{$5=substr($5,1,70)}1' ; done | ( echo \"ahead|behind||branch|lastcommit|message|author\\n\" && cat) | column -ts'|';}; r"
rbnf = !git fetch && git rebase origin/NETFramework
nfwhat = "log --oneline origin/NETFramework~1..HEAD"
wt = worktree
log-files-5 = !git log -n 5 --pretty=format:\"%h <-- %s\" --name-only | awk '/^[0-9a-f]/ {printf \"\\n%s\\n\",$0} /^[^0-9a-f]/ { printf \"  %s\\n\",$0}'
log-files-3 = !git log -n 3 --pretty=format:\"%h <-- %s\" --name-only | awk '/^[0-9a-f]/ {printf \"\\n%s\\n\",$0} /^[^0-9a-f]/ { printf \"  %s\\n\",$0}'
log-files-10 = !git log -n 10 --pretty=format:\"%h <-- %s\" --name-only | awk '/^[0-9a-f]/ {printf \"\\n%s\\n\",$0} /^[^0-9a-f]/ { printf \"  %s\\n\",$0}'
